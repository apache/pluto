<?xml version="1.0"?>
<!-- 
/*
 * Copyright 2001-2004 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 -->

<document>

  <properties>
    <title>Developing Plugins with Marmalade</title>
    <author email="jdcasey@apache.org">John Casey</author>
  </properties>

  <body>
    <section name="Developing Plugins with Marmalade">
      <p>
         NOTE: Compare this tutorial to
        <a href="http://maven.apache.org/using/developing-plugins.html">Developing
         Plugins</a> from the Maven 1.0 website. Marmalade is meant to be quite similar to Jelly in its 
         syntax, so this process should be very familiar to Maven 1.0 plugin developers.
      </p>
      <!-- TODO
            <p>
              If you need some background on how plugins fit into the execution model of Maven 2.0, try reading the
              <a href="architecture.html">Maven 2.0 Architecture</a>.
            </p>
      -->

      <subsection name="Graduating from Jelly: Plugins in Marmalade">
        <p>
          Beginning in Maven 2.0, plugins can be implemented in various languages. While our initial
          technology preview will only offer support for these Marmalade and Java, we will eventually add
          support for additional languages, possibly including Beanshell/Janino, Javascript, and more.
        </p>

        <p>
          Marmalade is a next-generation Jelly-like XML language, and was chosen for early inclusion in Maven 2.0 to
          ease migration from Maven 1.0, and to provide a way to incorporate Ant scripts into a build project.
        </p>

        <p>
          Marmalade currently has basic syntax compatibility with Jelly, and some measure of Jelly taglib
          compatibility... and this support will continue to improve as Marmalade matures. As such, Marmalade can allow
          the plugin developer the freedom to concentrate on porting between project models and core facilities, rather
          than worrying about changing implementation languages.
        </p>

        <p>
          Marmalade is still only a fledgling project, and while it's core engine is sophisticated and mature, it's
          support for Jelly and other taglibs is still growing at a brisk pace. In order to provide as much Jelly
          functionality out-of-the-box to Maven 2.0 users, Marmalade has an available compatibility layer for Jelly,
          which will allow the user to embed Jelly within Marmalade for the taglibs that have not yet been ported to
          native Marmalade.
        </p>

        <p>
          For those Maven 1.x users who have implemented their own plugins using Jelly, Marmalade can be 
          an extremely powerful language for porting to Maven 2.0.
        </p>

        <p>For more information on Marmalade, see the
          <a href="http://marmalade.codehaus.org">Marmalade website.</a>
        </p>
      </subsection>

      <subsection name="Marmalade Plugin Basics">
        <p>
          A plugin implemented in Marmalade can contain the following:
          <ul>
            <li>[Required] One or more Marmalade scripts, each in a file with the extension
              <code>.mmld</code>
            </li>
            <li>
              [Optional] One or more Marmalade tag libraries, each consisting of:
              <ul>
                <li>One or more implementations of MarmaladeTag</li>
                <li>An implementation of
                  <code>MarmaladeTagLibrary</code>, the constructor of which registers
                    each MarmaladeTag implementation to a tag name (for use in scripts)
                </li>
              </ul>
            </li>
            <li>
              [Required] A
              <code>pom.xml</code> for building the plugin, which contains a script source directory
              resembling
              <code><![CDATA[<scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>]]></code>
            </li>
            <li>[Optional] Plugin resources to be used from within the plugin's scripts (available on the classpath)</li>
            <li>[Optional] Other Java sources, which can be accessed from the plugin's scripts</li>
          </ul>
        </p>

        <p>
          Each
          <code>.mmld</code> script file must provide the same basic structural elements, which define it
          as a Maven 2.0 plugin, and provide essential metadata. This metadata is used to:
          <ul>
            <li>Inject project and environmental information into the plugin (parameters)</li>
            <li>Make common infrastructural components available for use in the plugin</li>
            <li>Bind the plugin to a particular point in the build process lifecycle, if appropriate</li>
            <li>Provide a goal name to reference the plugin from inside the Maven 2.0 system</li>
            <li>Provide descriptive information about what the plugin script does</li>
          </ul>
        </p>

        <p>
          The general structure of a Marmalade plugin script is:
        </p>
        <source><![CDATA[
<!-- The term mojo is a play on POJO, meant to mean "Maven POJO". 
 |   Mojos correspond to goals in Maven 2.0. 
 -->
<mojo xmlns="marmalade:mojo">
  <metadata>
    <goal>pluginGoalName</goal>
    <lifecyclePhase>compile</lifecyclePhase> <!-- Bind to the 'compile' phase of the standard build lifecycle. -->
    <description>A description of what the plugin accomplishes for the build process.</description>
    <parameters>
      <parameter>
        <name>parameterName</name> <!-- A name for accessing the parameter from the Marmalade context. -->
        <expression>#project.build.directory</expression> <!-- The expression used to bind the parameter. -->
        <description>Description of what this parameter is used for.</description>
      </parameter>
    </parameters>
  </metadata>
  <execute>
    <!-- This is where the guts of the plugin go. Below is a sample body, wherein a file called
     | "touch.txt" will be created in the output directory (by default, in ${basedir}/target), containing
     | the content "File Content".
     -->
    <io:file xmlns:io="marmalade:io" path="${outputDirectory}/touch.txt" mkdirs="true">File Content</io:file>
  </execute>
</mojo>]]></source>
      </subsection>

      <subsection name="Creating Your First Plugin">
        <p>
          To start creating a plugin, you must first create a Maven 2.0 project. This is
          the same as creating any other project, for example one that builds a JAR, with
          the exception that in the case of a Marmalade plugin, you have to specify a special
          source directory in which to find script sources.
        </p>
        <p>
          In a new directory, create a
          <code>pom.xml</code> file like so:
        </p>
        <source><![CDATA[<project> 
  <modelVersion>4.0.0</modelVersion>
  
  <!-- for now, this is the only groupId acceptable for maven plugins -->
  <groupId>org.apache.maven.plugins</groupId>
  
  <!-- uses a standard naming convention -->
  <artifactId>maven-hello-plugin</artifactId> 
  
  <!-- uses this version, to make it usable without configuring this plugin from
   |   the project POM.
   -->
  <version>1.0-SNAPSHOT</version>
  
  <!-- Designate this project as building a maven plugin -->
  <packaging>maven-plugin</packaging>

  <name>Maven Hello World Plugin</name> 

  <!-- 
    You might want to include additional information here
    eg the developers, organisation, and dependencies
  -->
 
  <build> 
    <scriptSourceDirectory>src/main/scripts</scriptSourceDirectory> 
    
    <!-- Since the script source directory is only a marker for a resource, you
     |   still have to declare that directory for resource inclusion when you
     |   build.
     -->
    <resources>
      <resource>
        <directory>src/main/scripts</directory>
        <includes><include>**/*.mmld</include></includes>
      </resource>
    </resources>
  </build> 
</project>]]></source>

        <p>
          Next, create your first plugin script. As mentioned above, each script corresponds to a single
          goal within the build system, so you may need several scripts.
        </p>
        <p>
          Since this is in fact a Hello World plugin, your script will simply output
          <code>Hello, World</code>
          to the screen. Create a script in
          <code>src/main/scripts/hello.mmld</code> with the following contents:
        </p>
        <source><![CDATA[
<mojo xmlns="marmalade:mojo">
  <metadata>
    <id>hello</id>
    <goal>hello</goal>
    <description>Say Hello to the World.</description>
  </metadata>
  <execute>
    <c:out xmlns:c="marmalade:core">Hello, World</c:out>
  </execute>
</mojo>]]></source>

        <p>
          Now that you can run the following command to install this into Maven's local artifact repository:
        </p>
        <source>m2 install</source>

        <p>
          You can prove the goal exists by running it.
        </p>
        <source>m2 hello:hello</source>

        <p>
          This execution should result in the following content being printed to the screen:
        </p>
        <source>Hello, World</source>
      </subsection>

      <subsection name="Using Plugin Parameters">
        <p>
          While you can always reference the POM information in a script using mojo parameters with expressions
          that reference project elements, a plugin will often need to create new parameters so that it can be customised.
        </p>

        <p>
          The creation of these parameters simply involves defining them in the metadata section of the script, 
          and optionally providing a default value for use in the event the user doesn't need to customize the plugin.
        </p>
        <p>
          As an example, create a parameter for the salutation to be used in your script:
        </p>
        <source><![CDATA[
<mojo xmlns="marmalade:mojo">
  <metadata>
    .
    .
    .
    <parameters>
      <parameter>
        <name>salutation</name>
        <expression>#salutation</expression>
        <default>Hello</default>
        <description>The salutation to use in greeting the world.</description>
      </parameter>
    </parameters>
  </metadata>
  .
  .
  .
</mojo>
        ]]></source>
        <p>
          Note the additional element in this parameter declaration:
          <code>default</code> specified a default
          salutation in case the user doesn't need or want to customize the plugin.
        </p>
        <p>
          Now, to make use of the new parameter. Inside the
          <code><![CDATA[<c:out/>]]></code> action, simply
          write out the customizable salutation instead of the stock phrase
          <code>Hello</code>:
        </p>
        <source><![CDATA[
<c:out xmlns:c="marmalade:core">${salutation}, World.</c:out>
        ]]></source>
        <p>
          Install the new plugin and run it, to verify your changes:
        </p>
        <source>m2 install
m2 hello:hello</source>
        <p>
          Notice that the output still has the same old salutation (which is the default value of the parameter). 
          Now, to customize it:
        </p>
        <source>m2 -Dsalutation=Hiya hello:hello</source>
        <p>
          The output should now read:
        </p>
        <source>Hiya, World</source>

        <p>
          Users of this plugin can also customize the salutation for their project and avoid having to specify it on
          the command line each time. All they have to do is create a plugin entry in their
          <code>pom.xml</code>
          similar to:
        </p>
        <source><![CDATA[
<project>
  .
  .
  .
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-hello-plugin</artifactId>
        <version>1.0-SNAPSHOT</version>
        <configuration>
          <salutation>Hiya</salutation>
        </configuration>
      </plugin>
    </plugins>
    .
    .
    .
  </build>
</project>
        ]]></source>
      </subsection>
    </section>
  </body>
</document>

